from django.test import TestCase, Client
from django.core import mail
from django.contrib.auth import get_user_model
from .models import Post, Group, User


class TestUserScripts(TestCase):
    def setUp(self):
        self.client = Client()
        self.username = 'test_user'
        self.password = '12345'
        self.email = 'test_user@domain.com'
        self.text = 'Test post text.'
        
        self.user = User.objects.create_user(username=self.username, email=self.email, password=self.password)
        self.post = Post.objects.create(author=self.user, text=self.text)
        self.client.login(username=self.username, password=self.password)
       
    def test_send_email(self):
        # Пользователь регистрируется и ему отправляется письмо с подтверждением регистрации
        mail.send_mail(
            'Тема письма', 'Текст письма.',
            'from@rocknrolla.net', ['to@mailservice.com'],
            fail_silently=False, # выводить описание ошибок
        )
        self.assertEqual(len(mail.outbox), 1)
        self.assertEqual(mail.outbox[0].subject, 'Тема письма')

    def test_create_proile(self):
        # После регистрации пользователя создается его персональная страница (profile)
        response = self.client.get("/test_user/")
        self.assertEqual(response.status_code, 200)
    
    def test_public_new_post(self):
        # Авторизованный пользователь может опубликовать пост (new)
        response = self.client.get('/new/')
        self.assertEqual(response.status_code, 200)

    def test_unauthorized_user_new_post(self):
        # Неавторизованный посетитель не может опубликовать пост (его редиректит на страницу входа)    
        self.client.logout()
        response = self.client.get("/new/")
        self.assertRedirects(response, '/auth/login/?next=/new/')

    def test_check_new_post_place(self):
        # После публикации поста новая запись появляется на главной странице сайта (index),
        # на персональной странице пользователя (profile), и на отдельной странице поста (post)
        response = self.client.get('/')
        self.assertContains(response, self.text)
        response = self.client.get(f'/{self.username}/')
        self.assertContains(response, self.text)
        response = self.client.get(f'/{self.username}/{self.post.id}/')
        self.assertContains(response, self.text)              
    
    def test_edit_post(self):
        # Авторизованный пользователь может отредактировать свой пост и его содержимое изменится на всех связанных страницах
        response = self.client.get(f'/{self.username}/{self.post.id}/edit')
        self.assertEqual(response.status_code, 200)
        edited_text = 'Test post text (edited).'
        self.post.text = edited_text
        self.post.save()

        response = self.client.get('/')
        self.assertContains(response, edited_text)
        response = self.client.get(f'/{self.username}/')
        self.assertContains(response, edited_text)
        response = self.client.get(f'/{self.username}/{self.post.id}/')
        self.assertContains(response, edited_text)      
